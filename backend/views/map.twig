<html>
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no" />
  <title>Generate data-driven visualization of unique values | Sample | ArcGIS API for JavaScript 4.24</title>
  <link rel="stylesheet" href="https://js.arcgis.com/4.24/esri/themes/light/main.css" />

  <style>
    html,
    body,
    #viewDiv {
      padding: 0;
      margin: 0;
      height: 100%;
      width: 100%;
    }
  </style>

  <script src="https://js.arcgis.com/4.24/"></script>

  <script>
    require([
      "esri/Map",
      "esri/views/MapView",
      "esri/layers/FeatureLayer",
      "esri/smartMapping/renderers/type",
      "esri/widgets/Legend",
      "esri/widgets/BasemapGallery",
      "esri/widgets/Expand",
      "esri/core/reactiveUtils"
    ], (Map,
        MapView,
        FeatureLayer,
        typeRendererCreator,
        Legend,
        BasemapGallery,
        Expand,
        reactiveUtils) => {
      // Create a map and add it to a MapView

      const map = new Map({
        basemap: "gray-vector"
      });

      const view = new MapView({
        map: map,
        center: [9.801302, 35.317366],
        zoom: 8,
        container: "viewDiv",
        constraints: {
          snapToZoom: false
        }
      });

      // Add a legend to the view

      const legend = new Legend({
        view: view,
        style: "card"
      });
      view.ui.add(legend, "bottom-left");

      const bg = new BasemapGallery({
        view: view,
        container: document.createElement("div")
      });

      // Call generateRenderer() anytime the user switches the basemap

      bg.watch("activeBasemap", generateRenderer);

      // Collapse the basemap gallery widget in the expand widget

      const expand = new Expand({
        view: view,
        content: bg
      });
      view.ui.add(expand, "top-right");

      // Create FeatureLayer instance with popupTemplate

      // const fieldInfos = [
      //   {
      //     fieldName: "M172_07",
      //     label: "Deer",
      //     format: {
      //       digitSeparator: true,
      //       places: 0
      //     }
      //   },
      //   {
      //     fieldName: "M188_07",
      //     label: "Wild pig",
      //     format: {
      //       digitSeparator: true,
      //       places: 0
      //     }
      //   }
      // ];

      // const layer = new FeatureLayer({
      //   url:
      //           "https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/US_county_crops_2007_clean/FeatureServer/0",
      //   outFields: [
      //     "M172_07",
      //     "M188_07",
      //   ],
      //   title: "Geo hunting areas",
      //   popupTemplate: {
      //     // autocasts as new PopupTemplate()
      //     title: "{COUNTY}, {STATE}",
      //     content: [
      //       {
      //         type: "text",
      //         text:
      //                 "{TOT_CROP_ACRES} acres of crops were harvested in {COUNTY}, {STATE}" +
      //                 " in 2007. The table below breaks down the number of acres that were" +
      //                 " harvested for each type of crop."
      //       },
      //       {
      //         type: "fields",
      //         fieldInfos: fieldInfos
      //       }
      //     ],
      //     fieldInfos: [
      //       {
      //         fieldName: "TOT_CROP_ACRES",
      //         label: "Total harvest acres of crops",
      //         format: {
      //           digitSeparator: true,
      //           places: 0
      //         }
      //       }
      //     ]
      //   }
      // });

      // Generate the renderer when the view becomes ready
      reactiveUtils.whenOnce(() => !view.updating).then(() => {
        generateRenderer();
      });

      function generateRenderer() {
        // configure parameters for the color renderer generator.
        // The layer must be specified along with a field name
        // The view and other properties determine
        // the appropriate default color scheme.

        const typeParams = {
          // layer: layer,
          view: view,
          field: "DOM_CROP_ACRES",
          legendOptions: {
            title: "Over all animal distribution "
          }
        };

        // Generate a unique value renderer based on the
        // unique values of the DOM_CROPS_ACRES field.
        // The generated renderer creates a visualization,
        // assigning each feature to a category.
        //
        // This resolves to an object containing several helpful
        // properties, including the type scheme, unique value infos,
        // excluded values (if any), and the renderer object

        typeRendererCreator
                .createRenderer(typeParams)
                .then((response) => {
                  // set the renderer to the layer and add it to the map

                  layer.renderer = response.renderer;

                  if(!map.layers.includes(layer)){
                    map.add(layer);
                  }
                })
                .catch((error) => {
                  console.error("there was an error: ", error);
                });
      }
    });
  </script>
</head>

<body>
<div id="viewDiv"></div>
</body>
</html>